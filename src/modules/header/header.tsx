/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import { Button, IModuleProps, INodeProps, KeyCodes, Modal, ModalBody, ModalHeader, Popover } from '@msdyn365-commerce-modules/utilities';
import { CartIconComponent, WishlistIconComponent} from '@msdyn365-commerce/components';
import { IRequestContextUser } from '@msdyn365-commerce/core';
import { Customer } from '@msdyn365-commerce/retail-proxy';
import classnames from 'classnames';
import * as React from 'react';
import { Logo, NavIcon } from './components';
import { IHeaderData } from './header.data';
import { IHeaderProps, IHeaderResources, IMyAccountLinksData } from './header.props.autogenerated';

export interface IHeaderState {
    mobileMenuCollapsed: boolean;
    signinPopoverOpen: boolean;
}

export interface  IHeaderViewProps extends IHeaderProps<IHeaderData>, IHeaderState {
    logo: React.ReactNode;
    wishListIconDesktop: React.ReactNode;
    wishListIconMobile: React.ReactNode;
    cartIcon: React.ReactNode;
    navIcon: React.ReactNode;
    className: string;
    menuBar: React.ReactNode[];
    search: React.ReactNode[];
    HeaderTag: IModuleProps;
    HeaderContainer: INodeProps;
    MobileMenuContainer: INodeProps;
    MobileMenuHeader: React.ReactNode;
    MobileMenuBodyContainer: INodeProps;
    MobileMenuLinksContainer: INodeProps;
    HeaderTopBarContainer: INodeProps;
    Divider: INodeProps;

    AccountInfoDropdownParentContainer?: INodeProps;
    AccountInfoDropdownPopoverConentContainer?: INodeProps;
    accountInfoDropdownButton?: React.ReactNode;

    signOutLink?: React.ReactNode;
    signInLink?: React.ReactNode;
    accountLinks?: React.ReactNode[];
}

/**
 *
 * Header component
 * @extends {React.PureComponent<IHeaderProps<IHeaderData>>}
 */
class Header extends React.PureComponent<IHeaderProps<IHeaderData>, IHeaderState> {
    private popOverRef: React.RefObject<HTMLButtonElement>;

    constructor(props: IHeaderProps<IHeaderData>) {
        super(props);
        this.popOverRef = React.createRef();
        this._toggleNavbar = this._toggleNavbar.bind(this);
        this._togglePopover = this._togglePopover.bind(this);
        this._keydown = this._keydown.bind(this);
        this.state = {
            mobileMenuCollapsed: true,
            signinPopoverOpen: false
        };
    }

    public componentDidMount(): void {
        window && window.addEventListener('keydown', this._keydown);
    }

    public componentWillUnmount(): void {
        window && window.removeEventListener('keydown', this._keydown, false);
    }

    public render(): JSX.Element | null {
        const {
            id,
            slots,
            typeName,
            data: { accountInformation,
                cart: { result: cart }
            },
            context: {
                request: {
                    user
                }
            },
            context,
            resources: {
                cartLabel
            }
        } = this.props;
        const {logoLink, logoImage} = this.props.config;
        const headerClassName = classnames('ms-header', this.props.config.className);
        const navbarKey = 'header-nav-mobile';

        const customer = accountInformation && accountInformation.result;

        const viewProps: IHeaderViewProps = {
            ...(this.props as IHeaderProps<IHeaderData>),
            ...(this.state),
            logo: <Logo {...{link: logoLink, image: logoImage, className: 'ms-header__logo', gridSettings: this.props.context.request.gridSettings}}/>,
            wishListIconDesktop: <WishlistIconComponent className='ms-header__wishlist-desktop' wishlistTooltipText={this.props.resources.wishlistTooltipText} context={context} id={id} typeName={typeName} data={{}}/>,
            wishListIconMobile: <WishlistIconComponent className='ms-header__wishlist-mobile' wishlistTooltipText={this.props.resources.wishlistTooltipText} context={context} id={id} typeName={typeName} data={{}}/>,
            cartIcon: cart && <CartIconComponent cartLabel={cartLabel} context={context} id={id} typeName={typeName} data={{cart: cart}}/>,
            navIcon: <NavIcon {...{resources: this.props.resources, isExpanded: !this.state.mobileMenuCollapsed, targetId: navbarKey, toggleNavBar: this._toggleNavbar}} />,
            menuBar: slots && slots.menuBar && slots.menuBar.length && slots.menuBar || [],
            search: slots && slots.search && slots.search.length && slots.search || [],
            className: headerClassName,
            HeaderTag: {
                moduleProps: this.props,
                className: classnames(headerClassName),
                tag:'header'
            },
            HeaderContainer: {
                className: classnames('ms-header__container')
            },
            HeaderTopBarContainer: {
                className: classnames('ms-header__topbar')
            },
            Divider: {
                className: classnames('ms-header__divider')
            },
            MobileMenuContainer: {
                tag: Modal,
                id: navbarKey,
                className: 'ms-header__mobile-hamburger',
                isOpen: !this.state.mobileMenuCollapsed,
                wrapClassName: 'ms-header__modal'
            },
            MobileMenuHeader: (
                <ModalHeader
                    className='ms-header__mobile-hamburger-menu-header'
                    toggle={this._toggleNavbar}
                />
            ),
            MobileMenuBodyContainer: {
                tag: ModalBody,
                className: 'ms-header__mobile-hamburger-menu-body',
            },
            MobileMenuLinksContainer: {
                className: 'ms-header__mobile-hamburger-menu-links',
            },
            AccountInfoDropdownParentContainer: customer && {
                className: 'ms-header__account-info'
            } || undefined,
            AccountInfoDropdownPopoverConentContainer: customer && customer.FirstName && {
                tag: Popover,
                id: 'myprofilePopover',
                className: 'ms-header__account-info-content',
                placement: 'bottom',
                isOpen: this.state.signinPopoverOpen,
                target: this.popOverRef,
                toggle: this._togglePopover,
            } || undefined,
            signInLink: this._getSigninButton(customer, user, this.props.resources),
            signOutLink: this._getSignOutButton(customer, user, this.props.resources),
            accountInfoDropdownButton: this._getAccountInfoDropdownButton(customer),
            accountLinks: this._getAccountLinks(customer)
        };

        return this.props.renderView(viewProps) as React.ReactElement;
    }

    private _getSigninButton(customer: Customer | undefined, user: IRequestContextUser | undefined, resources: IHeaderResources): React.ReactNode | undefined {
        return customer && !customer.FirstName && (
            <Button
                className='ms-header__signin-button'
                title={resources.signInLinkText}
                href={user && user.signInUrl}
                aria-label={resources.signInLinkAriaText}
            >
                <span className='ms-header__signin-button-text' aria-hidden={true}>{resources.signInLinkText}</span>
            </Button>
        );
    }

    private _getSignOutButton(customer: Customer | undefined, user: IRequestContextUser | undefined, resources: IHeaderResources): React.ReactNode | undefined {
        return customer && customer.FirstName && (
            <Button
                className={'ms-header__signout-button'}
                title={resources.signOutLinkText}
                href={user && user.signOutUrl || ''}
                aria-label={resources.signOutLinkAriaText}
            >
                <span className='ms-header__signout-button-text' aria-hidden={true}>{resources.signOutLinkText}</span>
            </Button>
        );
    }

    private _getAccountInfoDropdownButton(customer: Customer | undefined): React.ReactNode | undefined {
        return customer && customer.FirstName && (
            <Button
                innerRef={this.popOverRef}
                className={'ms-header__profile-button'}
                aria-describedby='myprofilePopover'
                onClick={this._togglePopover}
                color='link'
                aria-expanded={this.state.signinPopoverOpen}
            >
                <span className='ms-profile-button-text'>{customer.FirstName}</span>
            </Button>
        );
    }

    private _getAccountLinks(customer: Customer | undefined): React.ReactNode[] | undefined {
        const { myAccountLinks } = this.props.config;

        return customer && customer.FirstName && myAccountLinks && myAccountLinks.length ?
            myAccountLinks.map((cta: IMyAccountLinksData, index: number) => (
                <Button
                    className='ms-signin-info__account-link-button'
                    key={index}
                    href={cta.linkUrl.destinationUrl}
                    color='link'
                    aria-label={cta.ariaLabel || ''}
                    target={cta.openInNewTab ? '_blank' : undefined}
                >
                    {cta.linkText || ''}
                </Button>
            ))
        : undefined;
    }

    private _toggleNavbar(): void {
        this.setState({
            mobileMenuCollapsed: !this.state.mobileMenuCollapsed
        });
    }

    private _togglePopover(): void {
        this.setState({
            signinPopoverOpen: !this.state.signinPopoverOpen
        });
    }

    private _keydown(e: KeyboardEvent): void {
        if (e.keyCode === KeyCodes.Escape) {
            this.setState({ mobileMenuCollapsed: true });
        }
    }
}

export default Header;
